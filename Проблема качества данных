## Получите и загрузите данные.

import pandas as pd
import numpy as np
import seaborn as sns
import  matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from sklearn.metrics import precision_recall_curve
from sklearn import preprocessing

data = pd.read_csv('train.csv')
data.head()

## 2.Удалите все пропущенные значения и категориальные переменные. Обучите модель. Выберете и посчитайте метрику качества.

df=data.dropna().drop(['Sex','Embarked','Pclass','Name'], axis=1)

selectedColumns = df[['PassengerId', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin']]
standardize_X = pd.get_dummies(selectedColumns)
X = preprocessing.scale(standardize_X)
y = df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

predictions = model.predict(X_test)

model.score(X_train, y_train)
model.score(X_test,y_test)
roc_auc_score(y_test, predictions)

## 3.Снова загрузите полные данные.

data_new = pd.read_csv('train.csv')
data_new.columns
df_new=data.drop(['PassengerId','Name','Ticket','Cabin'], axis=1)

## 5.Проверьте данные на наличие пропущенных значений.
#Посчитайте, какой процент данных будет потерян, если просто удалить пропуски.
#Заполните пропуски: средним значением; константой; классом, указывающим на то, что значение было пропущено; случайным числом. Для разных признаков используйте подходящий метод. Можно не использовать все перечисленные методы.

df_new.isnull().sum() 
print('Процент потери данных если удалить пропуски:', df_new['Age'].isnull().sum()/len(df_new['Age'])*100, '%' )

df_new.describe()
df_new['Embarked'].value_counts()
df_updated = df_new.replace({'Age' : { np.NaN : '29.7'},'Embarked': { np.NaN : 'S'}})
df_updated.info()

## 6.Категориальные переменные переведите в цифровые значения. Можно использовать pd.get_dummies, preprocessing.LabelEncoder. Старайтесь не использовать для этой задачи циклы.

selectedColumns = df_updated[['Survived','Pclass','Sex', 'Age', 'SibSp',
       'Parch','Fare','Embarked']]
df_updated1 = pd.get_dummies(selectedColumns)
df_updated1.head()

cols = ['Pclass', 'SibSp','Parch','Fare']
sns_plot = sns.pairplot(df_updated1[cols])

numeric_col = ['Pclass', 'SibSp','Parch','Fare']
df_updated1.boxplot(numeric_col)

df_updated1['Fare'].value_counts().sort_index(ascending=True)

# удаляем из выбросов тольок максимальные значения в столбце Fare, их мало(3) и они сильно отличаются от массы
df_completed = df_updated1.loc[df_updated1['Fare'] != 512.3292]

## 10.Обучите ту же модель, что в п. 2 на преобразованных данных. Посчитайте ту же, что в п. 2 метрику.

df_X = df_completed.drop('Survived', axis = 1)
standardize_X1 = df_X
X1 = preprocessing.scale(standardize_X1)
y1 = df_completed['Survived']

X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X1_train, y1_train)

predictions1 = model.predict(X1_test)
model.score(X1_train, y1_train)
model.score(X1_test,y1_test)
roc_auc_score(y1_test, predictions1)



