##ЗАДАНИЕ №1
--Сделайте запрос к таблице payment и с помощью оконных функций добавьте вычисляемые колонки согласно условиям:
--Пронумеруйте все платежи от 1 до N по дате
--Пронумеруйте платежи для каждого покупателя, сортировка платежей должна быть по дате
--Посчитайте нарастающим итогом сумму всех платежей для каждого покупателя, сортировка должна 
--быть сперва по дате платежа, а затем по сумме платежа от наименьшей к большей
--Пронумеруйте платежи для каждого покупателя по стоимости платежа от наибольших к меньшим 
--так, чтобы платежи с одинаковым значением имели одинаковое значение номера.
--Можно составить на каждый пункт отдельный SQL-запрос, а можно объединить все колонки в одном запросе.

select customer_id,
payment_id,
payment_date,
(row_number() over(order by payment_date)),
(row_number() over(partition by customer_id order by payment_date)),
sum(amount) over(partition by customer_id order by payment_date),
rank() over(partition by customer_id order by amount desc)
from payment p


##ЗАДАНИЕ №2
--С помощью оконной функции выведите для каждого покупателя стоимость платежа и стоимость 
--платежа из предыдущей строки со значением по умолчанию 0.0 с сортировкой по дате.

select customer_id,
payment_id,
payment_date,
amount,
lag(amount,1,0.) over(partition by customer_id order by payment_date )
from payment p



##ЗАДАНИЕ №3
--С помощью оконной функции определите, на сколько каждый следующий платеж покупателя больше или меньше текущего.

select customer_id,
payment_id,
payment_date,
amount,
amount - lead(amount,1,0.) over(partition by customer_id order by payment_date ) difference
from payment p



##ЗАДАНИЕ №4
--С помощью оконной функции для каждого покупателя выведите данные о его последней оплате аренды.

select customer_id,
payment_id,
payment_date,
amount
from
(select customer_id,payment_id,payment_date,amount,
row_number()over(partition by customer_id order by payment_date desc)
from payment) a
where row_number = 1




--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

##ЗАДАНИЕ №1
--С помощью оконной функции выведите для каждого сотрудника сумму продаж за август 2005 года 
--с нарастающим итогом по каждому сотруднику и по каждой дате продажи (без учёта времени) 
--с сортировкой по дате.

select staff_id,
payment_date::date,
amount,
sum(amount) over(partition by staff_id order by payment_date::date)
from payment p 
join staff s using (staff_id)
where payment_date between '2005-08-01' and '2005-09-01'


##ЗАДАНИЕ №2
--20 августа 2005 года в магазинах проходила акция: покупатель каждого сотого платежа получал
--дополнительную скидку на следующую аренду. С помощью оконной функции выведите всех покупателей,
--которые в день проведения акции получили скидку

with a as (select customer_id,
payment_date,
row_number() over(order by payment_date) 
from payment p
where payment_date::date ='2005-08-20'
order by payment_date)
select * from a
where row_number % 100 = 0





